start      :== expression {{start}}

expression  :==  NUMBER                                  {{const_exp}}
            | ID                                        {{var_exp}}
            | "let" ID "=" expression "in" expression       {{let_exp}}
            | "zero?" "(" expression ")"                   {{zero_exp}}
            | "if" expression "then" expression "else" expression {{if_exp}}
            | "-" "(" expression "," expression ")"               {{diff_exp}}
            | "proc" "(" ID ")" expression                        {{proc_exp}}
            | "(" expression expression ")"                       {{call_exp}}



----------

from src._astree import *

def start(exp):
    return exp

def const_exp(number):
    return ConstExp(number)

def var_exp(token):
    return VarExp(token)

def let_exp(let, var, equal, exp1, _in, exp2):
    return LetExp(var, exp1, exp2)

def zero_exp(zero, lpar, exp1, rpar):
    return ZeroExp(exp1)

def if_exp(i, exp1, t, exp2, e, exp3):
    return IfExp(exp1, exp2, exp3)

def diff_exp(sub, lpar, exp1, comma, exp2, rpar):
    return DiffExp(exp1, exp2)

def proc_exp(proc, lpar, var, rpar, exp1):
    return ProcExp(var, exp1)

def call_exp(lpar, exp1, exp2, rpar):
    return CallExp(exp1, exp2)